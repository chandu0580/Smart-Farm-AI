import React, { useState, useRef, useEffect } from 'react';
import { Button } from '@/components/ui/button';
import { Input } from '@/components/ui/input';
import { Card } from '@/components/ui/card';
import { ScrollArea } from '@/components/ui/scroll-area';
import { Select, SelectContent, SelectItem, SelectTrigger, SelectValue } from '@/components/ui/select';
import { Avatar, AvatarFallback } from '@/components/ui/avatar';
import { Badge } from '@/components/ui/badge';
import { useToast } from '@/hooks/use-toast';
import { Progress } from '@/components/ui/progress';
import { Alert, AlertDescription } from '@/components/ui/alert';
import { 
  Send, 
  Sprout, 
  User, 
  Mic, 
  MicOff, 
  Globe, 
  AlertCircle, 
  CheckCircle, 
  Wifi, 
  WifiOff,
  Database,
  Zap,
  Code,
  Brain
} from 'lucide-react';
import { supabase } from '@/integrations/supabase/client';

interface Message {
  id: string;
  text: string;
  sender: 'user' | 'ai';
  timestamp: Date;
  language: string;
  confidence?: number;
  source?: 'huggingface' | 'knowledge_base' | 'error_fallback';
  queryType?: string;
  modelUsed?: string;
}

interface Language {
  code: string;
  name: string;
  native: string;
  flag: string;
}

interface ChatStats {
  totalQueries: number;
  avgResponseTime: number;
  successRate: number;
  openSourceQueries: number;
}

const languages: Language[] = [
  { code: 'en', name: 'English', native: 'English', flag: 'ЁЯЗ║ЁЯЗ╕' },
  { code: 'hi', name: 'Hindi', native: 'рд╣рд┐рдВрджреА', flag: 'ЁЯЗоЁЯЗ│' },
  { code: 'kn', name: 'Kannada', native: 'р▓Хр▓ир│Нр▓ир▓б', flag: 'ЁЯЗоЁЯЗ│' },
  { code: 'te', name: 'Telugu', native: 'р░др▒Жр░▓р▒Бр░Чр▒Б', flag: 'ЁЯЗоЁЯЗ│' },
  { code: 'ta', name: 'Tamil', native: 'родрооро┐ро┤рпН', flag: 'ЁЯЗоЁЯЗ│' }
];

const quickPrompts = {
  crop: {
    en: "ЁЯМ╛ Provide comprehensive crop advisory for all vegetables including tomato, potato, onion, cabbage, carrot, cucumber, brinjal, okra, spinach, and seasonal recommendations for each region",
    hi: "ЁЯМ╛ рдЯрдорд╛рдЯрд░, рдЖрд▓реВ, рдкреНрдпрд╛рдЬ, рдЧреЛрднреА, рдЧрд╛рдЬрд░, рдЦреАрд░рд╛, рдмреИрдВрдЧрди, рднрд┐рдВрдбреА, рдкрд╛рд▓рдХ рд╕рд╣рд┐рдд рд╕рднреА рд╕рдмреНрдЬрд┐рдпреЛрдВ рдХреЗ рд▓рд┐рдП рд╡реНрдпрд╛рдкрдХ рдлрд╕рд▓ рд╕рд▓рд╛рд╣ рдФрд░ рдкреНрд░рддреНрдпреЗрдХ рдХреНрд╖реЗрддреНрд░ рдХреЗ рд▓рд┐рдП рдореМрд╕рдореА рд╕рд┐рдлрд╛рд░рд┐рд╢реЗрдВ рдкреНрд░рджрд╛рди рдХрд░реЗрдВ",
    kn: "ЁЯМ╛ р▓Яр│Кр▓ор│Зр▓Яр│К, р▓Жр▓▓р│Вр▓Чр▓бр│Нр▓бр│Ж, р▓Ир▓░р│Бр▓│р│Нр▓│р▓┐, р▓Ор▓▓р│Жр▓Хр│Лр▓╕р│Б, р▓Хр│Нр▓пр▓╛р▓░р│Жр▓Яр│Н, р▓╕р│Мр▓др│Жр▓Хр▓╛р▓пр▓┐, р▓мр▓жр▓ир│Зр▓Хр▓╛р▓пр▓┐, р▓мр│Жр▓Вр▓бр│Жр▓Хр▓╛р▓пр▓┐, р▓кр▓╛р▓▓р▓Хр│Н р▓╕р│Зр▓░р▓┐р▓жр▓Вр▓др│Ж р▓Ор▓▓р│Нр▓▓р▓╛ р▓др▓░р▓Хр▓╛р▓░р▓┐р▓Чр▓│р▓┐р▓Чр│Ж р▓╕р▓ор▓Чр│Нр▓░ р▓мр│Жр▓│р│Ж р▓╕р▓▓р▓╣р│Ж р▓ор▓др│Нр▓др│Б р▓кр│Нр▓░р▓др▓┐ р▓кр│Нр▓░р▓жр│Зр▓╢р▓Хр│Нр▓Хр│Ж р▓Лр▓др│Бр▓ор▓╛р▓ир▓ж р▓╢р▓┐р▓лр▓╛р▓░р▓╕р│Бр▓Чр▓│р▓ир│Нр▓ир│Б р▓Тр▓жр▓Чр▓┐р▓╕р▓┐",
    te: "ЁЯМ╛ р░Яр▒Кр░ор░╛р░Яр▒Л, р░мр░Вр░Чр░╛р░│р░╛р░жр▒Бр░Вр░к, р░Йр░▓р▒Нр░▓р░┐р░кр░╛р░п, р░Хр░╛р░мр▒Зр░Ьр▒А, р░Хр▒Нр░пр░╛р░░р▒Жр░Яр▒Н, р░жр▒Лр░╕р░Хр░╛р░п, р░╡р░Вр░Хр░╛р░п, р░мр▒Жр░Вр░бр░Хр░╛р░п, р░кр░╛р░▓р░Хр▒Вр░░ р░др░жр░┐р░др░░ р░Ер░ир▒Нр░ир░┐ р░Хр▒Вр░░р░Чр░╛р░пр░▓р░Хр▒Б р░╕р░ор░Чр▒Нр░░ р░кр░Вр░Я р░╕р░▓р░╣р░╛ р░ор░░р░┐р░пр▒Б р░кр▒Нр░░р░др░┐ р░кр▒Нр░░р░╛р░Вр░др░╛р░ир░┐р░Хр░┐ р░Хр░╛р░▓р░╛р░ир▒Бр░Чр▒Бр░г р░╕р░┐р░лр░╛р░░р▒Нр░╕р▒Бр░▓р▒Б р░Ер░Вр░жр░┐р░Вр░Ър░Вр░бр░┐",
    ta: "ЁЯМ╛ родроХрпНроХро╛ро│ро┐, роЙро░рпБро│рпИроХрпНроХро┐ро┤роЩрпНроХрпБ, ро╡рпЖроЩрпНроХро╛ропроорпН, роорпБроЯрпНроЯрпИроХрпЛро╕рпН, роХрпЗро░роЯрпН, ро╡рпЖро│рпНро│ро░ро┐роХрпНроХро╛ропрпН, роХродрпНродро┐ро░ро┐роХрпНроХро╛ропрпН, ро╡рпЖрогрпНроЯрпИроХрпНроХро╛ропрпН, роХрпАро░рпИ роЙро│рпНро│ро┐роЯрпНроЯ роЕройрпИродрпНродрпБ роХро╛ропрпНроХро▒ро┐роХро│рпБроХрпНроХрпБроорпН ро╡ро┐ро░ро┐ро╡ро╛рой рокропро┐ро░рпН роЖро▓рпЛроЪройрпИ рооро▒рпНро▒рпБроорпН роТро╡рпНро╡рпКро░рпБ рокроХрпБродро┐роХрпНроХрпБроорпН рокро░рпБро╡роХро╛ро▓ рокро░ро┐роирпНродрпБро░рпИроХро│рпИ ро╡ро┤роЩрпНроХро╡рпБроорпН"
  },
  weather: {
    en: "ЁЯМдя╕П Provide comprehensive weather insights including monsoon patterns, drought preparation, flood management, temperature effects on all vegetable crops, and seasonal farming strategies for different climate zones",
    hi: "ЁЯМдя╕П рдорд╛рдирд╕реВрди рдкреИрдЯрд░реНрди, рд╕реВрдЦреЗ рдХреА рддреИрдпрд╛рд░реА, рдмрд╛рдврд╝ рдкреНрд░рдмрдВрдзрди, рд╕рднреА рд╕рдмреНрдЬреА рдлрд╕рд▓реЛрдВ рдкрд░ рддрд╛рдкрдорд╛рди рдХреЗ рдкреНрд░рднрд╛рд╡, рдФрд░ рд╡рд┐рднрд┐рдиреНрди рдЬрд▓рд╡рд╛рдпреБ рдХреНрд╖реЗрддреНрд░реЛрдВ рдХреЗ рд▓рд┐рдП рдореМрд╕рдореА рдЦреЗрддреА рд░рдгрдиреАрддрд┐рдпреЛрдВ рд╕рд╣рд┐рдд рд╡реНрдпрд╛рдкрдХ рдореМрд╕рдо рдЕрдВрддрд░реНрджреГрд╖реНрдЯрд┐ рдкреНрд░рджрд╛рди рдХрд░реЗрдВ",
    kn: "ЁЯМдя╕П р▓ор▓╛р▓ир│Нр▓╕р│Вр▓ир│Н р▓ор▓╛р▓жр▓░р▓┐р▓Чр▓│р│Б, р▓мр▓░ р▓др▓пр▓╛р▓░р▓┐, р▓кр│Нр▓░р▓╡р▓╛р▓╣ р▓ир▓┐р▓░р│Нр▓╡р▓╣р▓гр│Ж, р▓Ор▓▓р│Нр▓▓р▓╛ р▓др▓░р▓Хр▓╛р▓░р▓┐ р▓мр│Жр▓│р│Жр▓Чр▓│ р▓ор│Зр▓▓р│Ж р▓др▓╛р▓кр▓ор▓╛р▓ир▓ж р▓кр│Нр▓░р▓нр▓╛р▓╡р▓Чр▓│р│Б р▓ор▓др│Нр▓др│Б р▓╡р▓┐р▓╡р▓┐р▓з р▓╣р▓╡р▓╛р▓ор▓╛р▓и р▓╡р▓▓р▓пр▓Чр▓│р▓┐р▓Чр│Ж р▓Лр▓др│Бр▓ор▓╛р▓ир▓ж р▓Хр│Гр▓╖р▓┐ р▓др▓Вр▓др│Нр▓░р▓Чр▓│р│Б р▓╕р│Зр▓░р▓┐р▓жр▓Вр▓др│Ж р▓╕р▓ор▓Чр│Нр▓░ р▓╣р▓╡р▓╛р▓ор▓╛р▓и р▓Тр▓│р▓ир│Лр▓Яр▓Чр▓│р▓ир│Нр▓ир│Б р▓Тр▓жр▓Чр▓┐р▓╕р▓┐",
    te: "ЁЯМдя╕П р░╡р░╛р░и р░Хр░╛р░▓р░В р░ир░ор▒Вр░ир░╛р░▓р▒Б, р░Хр░░р▒Бр░╡р▒Б р░╕р░┐р░жр▒Нр░зр░д, р░╡р░░р░ж р░ир░┐р░░р▒Нр░╡р░╣р░г, р░Ер░ир▒Нр░ир░┐ р░Хр▒Вр░░р░Чр░╛р░пр░▓ р░кр░Вр░Яр░▓р░кр▒И р░Йр░╖р▒Нр░гр▒Лр░Чр▒Нр░░р░д р░кр▒Нр░░р░нр░╛р░╡р░╛р░▓р▒Б р░ор░░р░┐р░пр▒Б р░╡р░┐р░╡р░┐р░з р░╡р░╛р░др░╛р░╡р░░р░г р░кр▒Нр░░р░╛р░Вр░др░╛р░▓р░Хр▒Б р░Хр░╛р░▓р░╛р░ир▒Бр░Чр▒Бр░г р░╡р▒Нр░пр░╡р░╕р░╛р░п р░╡р▒Нр░пр▒Вр░╣р░╛р░▓р░др▒Л р░╕р░╣р░╛ р░╕р░ор░Чр▒Нр░░ р░╡р░╛р░др░╛р░╡р░░р░г р░Ер░Вр░др░░р▒Нр░жр▒Гр░╖р▒Нр░Яр▒Бр░▓р░ир▒Б р░Ер░Вр░жр░┐р░Вр░Ър░Вр░бр░┐",
    ta: "ЁЯМдя╕П рокро░рпБро╡рооро┤рпИ роорпБро▒рпИроХро│рпН, ро╡ро▒роЯрпНроЪро┐ родропро╛ро░ро┐рокрпНрокрпБ, ро╡рпЖро│рпНро│ роорпЗро▓ро╛рогрпНроорпИ, роЕройрпИродрпНродрпБ роХро╛ропрпНроХро▒ро┐ рокропро┐ро░рпНроХро│ро┐ро▓рпН ро╡рпЖрокрпНрокроиро┐ро▓рпИ ро╡ро┐ро│рпИро╡рпБроХро│рпН рооро▒рпНро▒рпБроорпН рокро▓рпНро╡рпЗро▒рпБ роХро╛ро▓роиро┐ро▓рпИ роорогрпНроЯро▓роЩрпНроХро│рпБроХрпНроХро╛рой рокро░рпБро╡роХро╛ро▓ ро╡ро┐ро╡роЪро╛роп роЙродрпНродро┐роХро│рпН роЙро│рпНро│ро┐роЯрпНроЯ ро╡ро┐ро░ро┐ро╡ро╛рой ро╡ро╛ройро┐ро▓рпИ роирпБрогрпНрогро▒ро┐ро╡рпБроХро│рпИ ро╡ро┤роЩрпНроХро╡рпБроорпН"
  },
  price: {
    en: "ЁЯТ░ Show real-time vegetable market prices across different mandis and regions including tomato, potato, onion, cabbage, carrot, cucumber, brinjal, okra, spinach prices with trends and best selling locations",
    hi: "ЁЯТ░ рд╡рд┐рднрд┐рдиреНрди рдордВрдбрд┐рдпреЛрдВ рдФрд░ рдХреНрд╖реЗрддреНрд░реЛрдВ рдореЗрдВ рдЯрдорд╛рдЯрд░, рдЖрд▓реВ, рдкреНрдпрд╛рдЬ, рдЧреЛрднреА, рдЧрд╛рдЬрд░, рдЦреАрд░рд╛, рдмреИрдВрдЧрди, рднрд┐рдВрдбреА, рдкрд╛рд▓рдХ рдХреА рдХреАрдорддреЛрдВ рдХреЗ рд╕рд╛рде рд░реБрдЭрд╛рди рдФрд░ рд╕рд░реНрд╡реЛрддреНрддрдо рдмрд┐рдХреНрд░реА рд╕реНрдерд╛рдиреЛрдВ рд╕рд╣рд┐рдд рд╡рд╛рд╕реНрддрд╡рд┐рдХ рд╕рдордп рд╕рдмреНрдЬреА рдмрд╛рдЬрд╛рд░ рдореВрд▓реНрдп рджрд┐рдЦрд╛рдПрдВ",
    kn: "ЁЯТ░ р▓Яр│Кр▓ор│Зр▓Яр│К, р▓Жр▓▓р│Вр▓Чр▓бр│Нр▓бр│Ж, р▓Ир▓░р│Бр▓│р│Нр▓│р▓┐, р▓Ор▓▓р│Жр▓Хр│Лр▓╕р│Б, р▓Хр│Нр▓пр▓╛р▓░р│Жр▓Яр│Н, р▓╕р│Мр▓др│Жр▓Хр▓╛р▓пр▓┐, р▓мр▓жр▓ир│Зр▓Хр▓╛р▓пр▓┐, р▓мр│Жр▓Вр▓бр│Жр▓Хр▓╛р▓пр▓┐, р▓кр▓╛р▓▓р▓Хр│Н р▓мр│Жр▓▓р│Жр▓Чр▓│р│Кр▓Вр▓жр▓┐р▓Чр│Ж р▓кр│Нр▓░р▓╡р│Гр▓др│Нр▓др▓┐р▓Чр▓│р│Б р▓ор▓др│Нр▓др│Б р▓Ер▓др│Нр▓пр│Бр▓др│Нр▓др▓о р▓ор▓╛р▓░р▓╛р▓Я р▓╕р│Нр▓ер▓│р▓Чр▓│р│Б р▓╕р│Зр▓░р▓┐р▓жр▓Вр▓др│Ж р▓╡р▓┐р▓╡р▓┐р▓з р▓ор▓Вр▓бр▓┐р▓Чр▓│р│Б р▓ор▓др│Нр▓др│Б р▓кр│Нр▓░р▓жр│Зр▓╢р▓Чр▓│р▓▓р│Нр▓▓р▓┐ р▓ир│Ир▓Ь-р▓╕р▓ор▓пр▓ж р▓др▓░р▓Хр▓╛р▓░р▓┐ р▓ор▓╛р▓░р│Бр▓Хр▓Яр│Нр▓Яр│Ж р▓мр│Жр▓▓р│Жр▓Чр▓│р▓ир│Нр▓ир│Б р▓др│Лр▓░р▓┐р▓╕р▓┐",
    te: "ЁЯТ░ р░Яр▒Кр░ор░╛р░Яр▒Л, р░мр░Вр░Чр░╛р░│р░╛р░жр▒Бр░Вр░к, р░Йр░▓р▒Нр░▓р░┐р░кр░╛р░п, р░Хр░╛р░мр▒Зр░Ьр▒А, р░Хр▒Нр░пр░╛р░░р▒Жр░Яр▒Н, р░жр▒Лр░╕р░Хр░╛р░п, р░╡р░Вр░Хр░╛р░п, р░мр▒Жр░Вр░бр░Хр░╛р░п, р░кр░╛р░▓р░Хр▒Вр░░ р░зр░░р░▓р░др▒Л р░кр░╛р░Яр▒Б р░Яр▒Нр░░р▒Жр░Вр░бр▒Нр░▓р▒Б р░ор░░р░┐р░пр▒Б р░ор▒Жр░░р▒Бр░Чр▒Ир░и р░Ер░ор▒Нр░ор░Хр░кр▒Б р░кр▒Нр░░р░╛р░Вр░др░╛р░▓р░др▒Л р░╕р░╣р░╛ р░╡р░┐р░╡р░┐р░з р░ор░╛р░░р▒Нр░Хр▒Жр░Яр▒Нр░▓р▒Б р░ор░░р░┐р░пр▒Б р░кр▒Нр░░р░╛р░Вр░др░╛р░▓р░▓р▒Л р░ир░┐р░Ь-р░╕р░ор░п р░Хр▒Вр░░р░Чр░╛р░пр░▓ р░ор░╛р░░р▒Нр░Хр▒Жр░Яр▒Н р░зр░░р░▓р░ир▒Б р░Ър▒Вр░кр░┐р░Вр░Ър░Вр░бр░┐",
    ta: "ЁЯТ░ родроХрпНроХро╛ро│ро┐, роЙро░рпБро│рпИроХрпНроХро┐ро┤роЩрпНроХрпБ, ро╡рпЖроЩрпНроХро╛ропроорпН, роорпБроЯрпНроЯрпИроХрпЛро╕рпН, роХрпЗро░роЯрпН, ро╡рпЖро│рпНро│ро░ро┐роХрпНроХро╛ропрпН, роХродрпНродро┐ро░ро┐роХрпНроХро╛ропрпН, ро╡рпЖрогрпНроЯрпИроХрпНроХро╛ропрпН, роХрпАро░рпИ ро╡ро┐ро▓рпИроХро│рпН рооро▒рпНро▒рпБроорпН рокрпЛроХрпНроХрпБроХро│рпН рооро▒рпНро▒рпБроорпН роЪро┐ро▒роирпНрод ро╡ро┐ро▒рпНрокройрпИ роЗроЯроЩрпНроХро│рпБроЯройрпН ро╡рпЖро╡рпНро╡рпЗро▒рпБ роорогрпНроЯро┐роХро│рпН рооро▒рпНро▒рпБроорпН рокроХрпБродро┐роХро│ро┐ро▓рпН роиро┐роХро┤рпНроирпЗро░ роХро╛ропрпНроХро▒ро┐ роЪроирпНродрпИ ро╡ро┐ро▓рпИроХро│рпИ роХро╛роЯрпНроЯро╡рпБроорпН"
  },
  fertilizer: {
    en: "ЁЯзк Provide detailed fertilizer recommendations for all vegetable crops including organic and chemical options, NPK ratios, application timing, and soil testing guidance for maximum yield",
    hi: "ЁЯзк рдЬреИрд╡рд┐рдХ рдФрд░ рд░рд╛рд╕рд╛рдпрдирд┐рдХ рд╡рд┐рдХрд▓реНрдкреЛрдВ, NPK рдЕрдиреБрдкрд╛рдд, рдЖрд╡реЗрджрди рд╕рдордп, рдФрд░ рдЕрдзрд┐рдХрддрдо рдЙрдкрдЬ рдХреЗ рд▓рд┐рдП рдорд┐рдЯреНрдЯреА рдкрд░реАрдХреНрд╖рдг рдорд╛рд░реНрдЧрджрд░реНрд╢рди рд╕рд╣рд┐рдд рд╕рднреА рд╕рдмреНрдЬреА рдлрд╕рд▓реЛрдВ рдХреЗ рд▓рд┐рдП рд╡рд┐рд╕реНрддреГрдд рдЙрд░реНрд╡рд░рдХ рд╕рд┐рдлрд╛рд░рд┐рд╢реЗрдВ рдкреНрд░рджрд╛рди рдХрд░реЗрдВ",
    kn: "ЁЯзк р▓╕р▓╛р▓╡р▓пр▓╡ р▓ор▓др│Нр▓др│Б р▓░р▓╛р▓╕р▓╛р▓пр▓ир▓┐р▓Х р▓Жр▓пр│Нр▓Хр│Жр▓Чр▓│р│Б, NPK р▓Ер▓ир│Бр▓кр▓╛р▓др▓Чр▓│р│Б, р▓Ер▓ир│Нр▓╡р▓пр▓┐р▓Хр│Ж р▓╕р▓ор▓п, р▓ор▓др│Нр▓др│Б р▓Чр▓░р▓┐р▓╖р│Нр▓а р▓Зр▓│р│Бр▓╡р▓░р▓┐р▓Чр▓╛р▓Чр▓┐ р▓ор▓гр│Нр▓гр▓┐р▓и р▓кр▓░р│Ар▓Хр│Нр▓╖р▓╛ р▓ор▓╛р▓░р│Нр▓Чр▓жр▓░р│Нр▓╢р▓и р▓╕р│Зр▓░р▓┐р▓жр▓Вр▓др│Ж р▓Ор▓▓р│Нр▓▓р▓╛ р▓др▓░р▓Хр▓╛р▓░р▓┐ р▓мр│Жр▓│р│Жр▓Чр▓│р▓┐р▓Чр│Ж р▓╡р▓┐р▓╡р▓░р▓╡р▓╛р▓ж р▓Чр│Кр▓мр│Нр▓мр▓░ р▓╢р▓┐р▓лр▓╛р▓░р▓╕р│Бр▓Чр▓│р▓ир│Нр▓ир│Б р▓Тр▓жр▓Чр▓┐р▓╕р▓┐",
    te: "ЁЯзк р░╕р▒Зр░Вр░жр▒Нр░░р▒Ар░п р░ор░░р░┐р░пр▒Б р░░р░╕р░╛р░пр░и р░Ор░Вр░кр░┐р░Хр░▓р▒Б, NPK р░ир░┐р░╖р▒Нр░кр░др▒Нр░др▒Бр░▓р▒Б, р░Ер░кр▒Нр░▓р░┐р░Хр▒Зр░╖р░ир▒Н р░Яр▒Ир░ор░┐р░Вр░Чр▒Н р░ор░░р░┐р░пр▒Б р░Чр░░р░┐р░╖р▒Нр░Я р░жр░┐р░Чр▒Бр░мр░бр░┐р░Хр░┐ р░ор░Яр▒Нр░Яр░┐ р░кр░░р▒Ар░Хр▒Нр░╖ р░ор░╛р░░р▒Нр░Чр░жр░░р▒Нр░╢р░Хр░др▒Нр░╡р░Вр░др▒Л р░╕р░╣р░╛ р░Ер░ир▒Нр░ир░┐ р░Хр▒Вр░░р░Чр░╛р░пр░▓ р░кр░Вр░Яр░▓р░Хр▒Б р░╡р░┐р░╡р░░р░гр░╛р░др▒Нр░ор░Х р░Ор░░р▒Бр░╡р▒Бр░▓ р░╕р░┐р░лр░╛р░░р▒Нр░╕р▒Бр░▓р░ир▒Б р░Ер░Вр░жр░┐р░Вр░Ър░Вр░бр░┐",
    ta: "ЁЯзк роЗропро▒рпНроХрпИ рооро▒рпНро▒рпБроорпН роЗро░роЪро╛ропрой ро╡ро┐ро░рпБрокрпНрокроЩрпНроХро│рпН, NPK ро╡ро┐роХро┐родроЩрпНроХро│рпН, рокропройрпНрокро╛роЯрпНроЯрпБ роирпЗро░роорпН рооро▒рпНро▒рпБроорпН роЕродро┐роХрокроЯрпНроЪ роороХроЪрпВро▓рпБроХрпНроХро╛рой роорогрпН роЪрпЛродройрпИ ро╡ро┤ро┐роХро╛роЯрпНроЯрпБродро▓рпН роЙро│рпНро│ро┐роЯрпНроЯ роЕройрпИродрпНродрпБ роХро╛ропрпНроХро▒ро┐ рокропро┐ро░рпНроХро│рпБроХрпНроХрпБроорпН ро╡ро┐ро░ро┐ро╡ро╛рой роЙро░ рокро░ро┐роирпНродрпБро░рпИроХро│рпИ ро╡ро┤роЩрпНроХро╡рпБроорпН"
  }
};

export const OpenSourceChatInterface: React.FC = () => {
  const [messages, setMessages] = useState<Message[]>([]);
  const [currentMessage, setCurrentMessage] = useState('');
  const [selectedLanguage, setSelectedLanguage] = useState('en');
  const [isLoading, setIsLoading] = useState(false);
  const [isListening, setIsListening] = useState(false);
  const [connectionStatus, setConnectionStatus] = useState<'online' | 'offline' | 'connecting'>('online');
  const [chatStats, setChatStats] = useState<ChatStats>({ 
    totalQueries: 0, 
    avgResponseTime: 0, 
    successRate: 100,
    openSourceQueries: 0
  });
  const [typingProgress, setTypingProgress] = useState(0);
  const messagesEndRef = useRef<HTMLDivElement>(null);
  const { toast } = useToast();

  const scrollToBottom = () => {
    messagesEndRef.current?.scrollIntoView({ behavior: 'smooth' });
  };

  useEffect(scrollToBottom, [messages]);

  const simulateTypingProgress = () => {
    setTypingProgress(0);
    const interval = setInterval(() => {
      setTypingProgress(prev => {
        if (prev >= 100) {
          clearInterval(interval);
          return 100;
        }
        return prev + Math.random() * 12;
      });
    }, 300);
    return () => clearInterval(interval);
  };

  const getOpenSourceFarmingAdvice = async (message: string, language: string): Promise<{ 
    response: string; 
    source: 'huggingface' | 'knowledge_base' | 'error_fallback'; 
    queryType: string;
    modelUsed?: string;
  }> => {
    const startTime = Date.now();
    
    try {
      setConnectionStatus('connecting');
      
      console.log('ЁЯМ╛ Calling open-source farming chat...');
      
      // Call our HuggingFace-powered edge function
      const { data, error } = await supabase.functions.invoke('farming-chat-oss', {
        body: { message, language }
      });

      if (error) {
        throw error;
      }

      setConnectionStatus('online');
      const responseTime = Date.now() - startTime;
      updateChatStats(responseTime, true);
      
      return {
        response: data.response,
        source: data.source || 'huggingface',
        queryType: data.queryType || 'general',
        modelUsed: data.model_used
      };
    } catch (error) {
      console.error('тЭМ Open-source chat failed:', error);
      setConnectionStatus('offline');
      
      const responseTime = Date.now() - startTime;
      updateChatStats(responseTime, false);
      
      // Enhanced fallback response
      const fallbackResponse = `ЁЯдЦ **Open-Source Demo Mode**

I'm currently running without the HuggingFace connection. Here's what I would normally provide:

ЁЯМ╛ **AI-Powered Features** (when connected):
тАв **Language Detection**: Automatic detection of Hindi, Kannada, English, Telugu, Tamil
тАв **Smart Translation**: Bi-directional translation for multilingual support  
тАв **Context-Aware Responses**: Using agricultural knowledge base + AI generation
тАв **Query Classification**: Automatic categorization (crop, weather, price, fertilizer)

ЁЯФз **Models Used**:
тАв **google/flan-t5-large** for instruction following
тАв **sentence-transformers** for embeddings (in full backend)
тАв **FAISS** for similarity search (in Python backend)

ЁЯТб **To unlock full features**: Set up HuggingFace API key and deploy the complete open-source stack!

---
*This is a demo response. In production, you'd get personalized farming advice generated by open-source AI models.*`;

      return {
        response: fallbackResponse,
        source: 'error_fallback',
        queryType: 'demo'
      };
    }
  };

  const updateChatStats = (responseTime: number, success: boolean) => {
    setChatStats(prev => ({
      totalQueries: prev.totalQueries + 1,
      avgResponseTime: (prev.avgResponseTime * prev.totalQueries + responseTime) / (prev.totalQueries + 1),
      successRate: success 
        ? ((prev.successRate * prev.totalQueries) + 100) / (prev.totalQueries + 1)
        : ((prev.successRate * prev.totalQueries) + 0) / (prev.totalQueries + 1),
      openSourceQueries: success ? prev.openSourceQueries + 1 : prev.openSourceQueries
    }));
  };

  const handleSendMessage = async () => {
    if (!currentMessage.trim()) return;

    const userMessage: Message = {
      id: Date.now().toString(),
      text: currentMessage,
      sender: 'user',
      timestamp: new Date(),
      language: selectedLanguage
    };

    setMessages(prev => [...prev, userMessage]);
    setCurrentMessage('');
    setIsLoading(true);
    
    const cleanupTyping = simulateTypingProgress();

    try {
      const { response, source, queryType, modelUsed } = await getOpenSourceFarmingAdvice(currentMessage, selectedLanguage);
      
      const aiMessage: Message = {
        id: (Date.now() + 1).toString(),
        text: response,
        sender: 'ai',
        timestamp: new Date(),
        language: selectedLanguage,
        confidence: source === 'error_fallback' ? 0.60 : source === 'knowledge_base' ? 0.75 : 0.92,
        source,
        queryType,
        modelUsed
      };

      setMessages(prev => [...prev, aiMessage]);
      
      const sourceLabels = {
        'huggingface': 'ЁЯдЧ HuggingFace AI',
        'knowledge_base': 'ЁЯУЪ Knowledge Base',
        'error_fallback': 'ЁЯФз Demo Mode'
      };
      
      toast({
        title: "тЬЕ Open-Source Response",
        description: `Generated via ${sourceLabels[source]} ${modelUsed ? `(${modelUsed})` : ''}`,
      });
    } catch (error) {
      toast({
        title: "тЭМ Error",
        description: "Failed to get response from open-source AI.",
        variant: "destructive",
      });
    } finally {
      setIsLoading(false);
      cleanupTyping();
      setTypingProgress(0);
    }
  };

  const handleKeyPress = (e: React.KeyboardEvent) => {
    if (e.key === 'Enter' && !e.shiftKey) {
      e.preventDefault();
      handleSendMessage();
    }
  };

  const toggleVoiceInput = () => {
    setIsListening(!isListening);
    toast({
      title: isListening ? "ЁЯОд Voice Stopped" : "ЁЯОд Voice Started",
      description: isListening ? "Click to start listening again" : "Speak your farming question now",
    });
  };

  const getStatusIcon = () => {
    switch (connectionStatus) {
      case 'online': return <Zap className="h-4 w-4 text-farm-green" />;
      case 'connecting': return <Brain className="h-4 w-4 text-farm-gold animate-pulse" />;
      case 'offline': return <Code className="h-4 w-4 text-muted-foreground" />;
    }
  };

  const getSourceBadge = (source?: string, modelUsed?: string) => {
    const badges = {
      'huggingface': { icon: <Zap className="h-3 w-3" />, label: 'HuggingFace', color: 'bg-farm-green text-white' },
      'knowledge_base': { icon: <Database className="h-3 w-3" />, label: 'Knowledge Base', color: 'bg-farm-gold text-white' },
      'error_fallback': { icon: <Code className="h-3 w-3" />, label: 'Demo', color: 'bg-muted text-muted-foreground' }
    };
    
    const badge = badges[source as keyof typeof badges];
    if (!badge) return null;
    
    return (
      <div className="flex items-center gap-1">
        <Badge variant="secondary" className={`text-xs flex items-center gap-1 ${badge.color}`}>
          {badge.icon}
          {badge.label}
        </Badge>
        {modelUsed && (
          <Badge variant="outline" className="text-xs">
            {modelUsed.split('/')[1] || modelUsed}
          </Badge>
        )}
      </div>
    );
  };

  return (
    <div className="flex flex-col h-full max-w-6xl mx-auto">
      {/* Enhanced Header with Open-Source Branding */}
      <div className="flex items-center justify-between p-4 border-b bg-card shadow-sm">
        <div className="flex items-center gap-3">
          <div className="p-2 rounded-lg bg-gradient-to-r from-farm-green to-farm-gold shadow-lg">
            <Sprout className="h-6 w-6 text-white" />
          </div>
          <div>
            <h2 className="text-xl font-semibold text-foreground flex items-center gap-2">
              Smart Farming AI 
              <Badge variant="secondary" className="bg-farm-green text-white text-xs">
                ЁЯФУ Open Source
              </Badge>
            </h2>
            <div className="flex items-center gap-2 text-sm text-muted-foreground">
              <span>Powered by HuggingFace + Open Models</span>
              {getStatusIcon()}
              <span className="capitalize">{connectionStatus}</span>
            </div>
          </div>
        </div>
        
        <div className="flex items-center gap-3">
          {/* Enhanced Chat Stats */}
          <div className="hidden md:flex items-center gap-4 text-xs text-muted-foreground">
            <span>Total: {chatStats.totalQueries}</span>
            <span>Open-Source: {chatStats.openSourceQueries}</span>
            <span>Avg: {Math.round(chatStats.avgResponseTime)}ms</span>
          </div>
          
          <Select value={selectedLanguage} onValueChange={setSelectedLanguage}>
            <SelectTrigger className="w-40">
              <Globe className="h-4 w-4 mr-2" />
              <SelectValue />
            </SelectTrigger>
            <SelectContent>
              {languages.map((lang) => (
                <SelectItem key={lang.code} value={lang.code}>
                  <span className="flex items-center gap-2">
                    <span>{lang.flag}</span>
                    <span>{lang.native}</span>
                  </span>
                </SelectItem>
              ))}
            </SelectContent>
          </Select>
        </div>
      </div>

      {/* Open-Source Status Alert */}
      {connectionStatus === 'offline' && (
        <Alert className="m-4 border-farm-gold/50 bg-farm-gold/10">
          <Code className="h-4 w-4" />
          <AlertDescription>
            ЁЯФУ <strong>Open-Source Demo Mode</strong>: Connect HuggingFace API for full AI capabilities. 
            Using local knowledge base for responses.
          </AlertDescription>
        </Alert>
      )}

      {/* Messages Area */}
      <ScrollArea className="flex-1 p-4">
        <div className="space-y-4">
          {messages.length === 0 && (
            <div className="text-center py-12">
              <div className="inline-flex p-6 rounded-full bg-gradient-to-r from-farm-green/10 to-farm-gold/10 mb-6">
                <div className="relative">
                  <Sprout className="h-12 w-12 text-farm-green" />
                  <Badge className="absolute -top-2 -right-2 bg-farm-green text-white text-xs px-1 py-0">
                    OSS
                  </Badge>
                </div>
              </div>
              <h3 className="text-2xl font-semibold text-foreground mb-3">
                {selectedLanguage === 'hi' ? 'ЁЯФУ рдУрдкрди рд╕реЛрд░реНрд╕ рд╕реНрдорд╛рд░реНрдЯ рдХреГрд╖рд┐ AI' : 
                 selectedLanguage === 'kn' ? 'ЁЯФУ р▓Ур▓кр▓ир│Н р▓╕р│Лр▓░р│Нр▓╕р│Н р▓╕р│Нр▓ор▓╛р▓░р│Нр▓Яр│Н р▓лр▓╛р▓░р│Нр▓ор▓┐р▓Вр▓Чр│Н AI' : 
                 selectedLanguage === 'te' ? 'ЁЯФУ р░Ур░кр▒Жр░ир▒Н р░╕р▒Лр░░р▒Нр░╕р▒Н р░╕р▒Нр░ор░╛р░░р▒Нр░Яр▒Н р░лр░╛р░░р▒Нр░ор░┐р░Вр░Чр▒Н AI' :
                 selectedLanguage === 'ta' ? 'ЁЯФУ роУрокройрпН роЪрпЛро░рпНро╕рпН ро╕рпНрооро╛ро░рпНроЯрпН роГрокро╛ро░рпНрооро┐роЩрпН AI' :
                 'ЁЯФУ Open-Source Smart Farming AI'}
              </h3>
              <p className="text-muted-foreground max-w-md mx-auto mb-4">
                {selectedLanguage === 'hi' ? 'HuggingFace рдореЙрдбрд▓ рдХреЗ рд╕рд╛рде рд╕рдВрдЪрд╛рд▓рд┐рдд тАв рднрд╛рд╖рд╛ рдХреА рдкрд╣рдЪрд╛рди тАв рдЦреБрд▓рд╛ рд╕реНрд░реЛрдд' : 
                 selectedLanguage === 'kn' ? 'HuggingFace р▓ор▓╛р▓бр│Жр▓▓р│НтАМр▓Чр▓│р│Кр▓Вр▓жр▓┐р▓Чр│Ж р▓Ър▓╛р▓▓р▓┐р▓д тАв р▓нр▓╛р▓╖р▓╛ р▓кр▓др│Нр▓др│Ж тАв р▓ор│Бр▓Хр│Нр▓д р▓ор│Вр▓▓' : 
                 selectedLanguage === 'te' ? 'HuggingFace р░ор▒Лр░бр░▓р▒Нр░╕р▒НтАМр░др▒Л р░╢р░Хр▒Нр░др░┐р░╡р░Вр░др░В тАв р░нр░╛р░╖ р░Чр▒Бр░░р▒Нр░др░┐р░Вр░кр▒Б тАв р░Ур░кр▒Жр░ир▒Н р░╕р▒Лр░░р▒Нр░╕р▒Н' :
                 selectedLanguage === 'ta' ? 'HuggingFace рооро╛роЯро▓рпНроХро│ро╛ро▓рпН роЗропроХрпНроХрокрпНрокроЯрпБроХро┐ро▒родрпБ тАв роорпКро┤ро┐ роХрогрпНроЯро▒ро┐родро▓рпН тАв родро┐ро▒роирпНрод роорпВро▓роорпН' :
                 'Powered by HuggingFace Models тАв Language Detection тАв Fully Open-Source'}
              </p>
              <div className="flex flex-wrap justify-center gap-2 text-xs text-muted-foreground">
                <Badge variant="outline">ЁЯдЧ HuggingFace</Badge>
                <Badge variant="outline">ЁЯза Flan-T5</Badge>
                <Badge variant="outline">ЁЯФН FAISS Ready</Badge>
                <Badge variant="outline">ЁЯМР Multilingual</Badge>
              </div>
            </div>
          )}
          
          {messages.map((message) => (
            <div
              key={message.id}
              className={`flex gap-3 ${message.sender === 'user' ? 'justify-end' : 'justify-start'}`}
            >
              {message.sender === 'ai' && (
                <Avatar className="h-10 w-10 bg-gradient-to-r from-farm-green to-farm-gold">
                  <AvatarFallback className="text-white">
                    <Sprout className="h-5 w-5" />
                  </AvatarFallback>
                </Avatar>
              )}
              
              <div className={`max-w-[80%] ${message.sender === 'user' ? 'order-last' : ''}`}>
                <Card className={`p-4 ${
                  message.sender === 'user' 
                    ? 'bg-primary text-primary-foreground ml-auto shadow-lg' 
                    : 'bg-card border shadow-sm'
                }`}>
                  <div className="text-sm whitespace-pre-wrap leading-relaxed">{message.text}</div>
                  
                  {message.sender === 'ai' && (
                    <div className="flex items-center justify-between mt-3 pt-3 border-t border-border/50">
                      <div className="flex items-center gap-2 flex-wrap">
                        {getSourceBadge(message.source, message.modelUsed)}
                        {message.queryType && (
                          <Badge variant="outline" className="text-xs capitalize">
                            {message.queryType}
                          </Badge>
                        )}
                        {message.confidence && (
                          <Badge variant="secondary" className="text-xs">
                            {Math.round(message.confidence * 100)}%
                          </Badge>
                        )}
                      </div>
                      <span className="text-xs text-muted-foreground ml-2">
                        {message.timestamp.toLocaleTimeString()}
                      </span>
                    </div>
                  )}
                </Card>
              </div>
              
              {message.sender === 'user' && (
                <Avatar className="h-10 w-10">
                  <AvatarFallback>
                    <User className="h-5 w-5" />
                  </AvatarFallback>
                </Avatar>
              )}
            </div>
          ))}
          
          {isLoading && (
            <div className="flex gap-3">
              <Avatar className="h-10 w-10 bg-gradient-to-r from-farm-green to-farm-gold">
                <AvatarFallback className="text-white">
                  <Sprout className="h-5 w-5" />
                </AvatarFallback>
              </Avatar>
              <Card className="p-4 bg-card border max-w-sm">
                <div className="space-y-3">
                  <div className="flex items-center gap-3">
                    <div className="flex space-x-1">
                      <div className="w-2 h-2 bg-farm-green rounded-full animate-bounce [animation-delay:-0.3s]"></div>
                      <div className="w-2 h-2 bg-farm-green rounded-full animate-bounce [animation-delay:-0.15s]"></div>
                      <div className="w-2 h-2 bg-farm-green rounded-full animate-bounce"></div>
                    </div>
                    <span className="text-sm text-muted-foreground">
                      {selectedLanguage === 'hi' ? 'ЁЯдЧ HuggingFace AI рд╕реЛрдЪ рд░рд╣рд╛ рд╣реИ...' : 
                       selectedLanguage === 'kn' ? 'ЁЯдЧ HuggingFace AI р▓пр│Лр▓Ър▓┐р▓╕р│Бр▓др│Нр▓др▓┐р▓жр│Ж...' : 
                       selectedLanguage === 'te' ? 'ЁЯдЧ HuggingFace AI р░Жр░▓р▒Лр░Ър░┐р░╕р▒Нр░др▒Лр░Вр░жр░┐...' :
                       selectedLanguage === 'ta' ? 'ЁЯдЧ HuggingFace AI роЪро┐роирпНродро┐роХрпНроХро┐ро▒родрпБ...' :
                       'ЁЯдЧ HuggingFace AI is thinking...'}
                    </span>
                  </div>
                  {typingProgress > 0 && (
                    <div className="space-y-1">
                      <Progress value={typingProgress} className="h-1" />
                      <div className="text-xs text-muted-foreground">
                        Processing with open-source models...
                      </div>
                    </div>
                  )}
                </div>
              </Card>
            </div>
          )}
        </div>
        <div ref={messagesEndRef} />
      </ScrollArea>

      {/* Enhanced Input Area with Advanced Features */}
      <div className="border-t p-4 bg-card">
        {/* Voice Input Status */}
        {isListening && (
          <div className="mb-3 p-2 bg-accent rounded-lg flex items-center gap-2 text-sm">
            <div className="w-2 h-2 bg-destructive rounded-full animate-pulse"></div>
            <span className="text-accent-foreground">
              {selectedLanguage === 'hi' ? 'ЁЯОд рд╕реБрди рд░рд╣рд╛ рд╣реИ... рдмреЛрд▓рд┐рдП' : 
               selectedLanguage === 'kn' ? 'ЁЯОд р▓Хр│Зр▓│р│Бр▓др│Нр▓др▓┐р▓жр│Ж... р▓ор▓╛р▓др▓ир▓╛р▓бр▓┐' : 
               selectedLanguage === 'te' ? 'ЁЯОд р░╡р░┐р░Вр░Яр▒Лр░Вр░жр░┐... р░ор░╛р░Яр▒Нр░▓р░╛р░бр░Вр░бр░┐' :
               selectedLanguage === 'ta' ? 'ЁЯОд роХрпЗроЯрпНроХро┐ро▒родрпБ... рокрпЗроЪрпБроЩрпНроХро│рпН' :
               'ЁЯОд Listening... Speak now'}
            </span>
          </div>
        )}

        <div className="flex gap-3 mb-3">
          <Button
            variant="outline"
            size="icon"
            onClick={toggleVoiceInput}
            className={`${isListening ? 'bg-destructive text-destructive-foreground animate-pulse' : ''}`}
            title={isListening ? 'Stop listening' : 'Start voice input'}
          >
            {isListening ? <MicOff className="h-4 w-4" /> : <Mic className="h-4 w-4" />}
          </Button>
          
          <div className="flex-1 relative">
            <Input
              value={currentMessage}
              onChange={(e) => setCurrentMessage(e.target.value)}
              onKeyPress={handleKeyPress}
              placeholder={
                selectedLanguage === 'hi' ? 'рдУрдкрди рд╕реЛрд░реНрд╕ AI рд╕реЗ рдкреВрдЫреЗрдВ... (рдЬреИрд╕реЗ "рдЯрдорд╛рдЯрд░ рдХреА рдЦреЗрддреА рдХреИрд╕реЗ рдХрд░реЗрдВ?")' : 
                selectedLanguage === 'kn' ? 'р▓Ур▓кр▓ир│Н р▓╕р│Лр▓░р│Нр▓╕р│Н AI р▓пр▓┐р▓Вр▓ж р▓Хр│Зр▓│р▓┐... (р▓Йр▓жр▓╛ "р▓Яр│Кр▓ор│Зр▓Яр│К р▓мр│Жр▓│р│Ж р▓╣р│Зр▓Чр│Ж р▓ор▓╛р▓бр│Бр▓╡р│Бр▓жр│Б?")' : 
                selectedLanguage === 'te' ? 'р░Ур░кр▒Жр░ир▒Н р░╕р▒Лр░░р▒Нр░╕р▒Н AI р░ир░┐ р░Ер░бр░Чр░Вр░бр░┐... (р░Йр░жр░╛ "р░Яр▒Кр░ор░╛р░Яр▒Л р░╕р░╛р░Чр▒Б р░Ор░▓р░╛ р░Ър▒Зр░пр░╛р░▓р░┐?")' :
                selectedLanguage === 'ta' ? 'роУрокройрпН роЪрпЛро░рпНро╕рпН AI ропро┐роЯроорпН роХрпЗро│рпБроЩрпНроХро│рпН... (роЙродро╛ "родроХрпНроХро╛ро│ро┐ роЪро╛роХрпБрокроЯро┐ роОро╡рпНро╡ро╛ро▒рпБ роЪрпЖропрпНро╡родрпБ?")' :
                'Ask open-source AI... (e.g., "How to grow tomatoes?")'
              }
              className="pr-4 text-base"
              disabled={isLoading}
            />
            {/* Character count indicator */}
            {currentMessage.length > 0 && (
              <div className="absolute right-2 top-1/2 transform -translate-y-1/2 text-xs text-muted-foreground">
                {currentMessage.length}/500
              </div>
            )}
          </div>
          
          <Button 
            onClick={handleSendMessage} 
            disabled={!currentMessage.trim() || isLoading || currentMessage.length > 500}
            className="bg-gradient-to-r from-farm-green to-farm-gold hover:from-farm-green/90 hover:to-farm-gold/90 px-6"
          >
            <Send className="h-4 w-4 mr-2" />
            {selectedLanguage === 'hi' ? 'рднреЗрдЬреЗрдВ' : 
             selectedLanguage === 'kn' ? 'р▓Хр▓│р│Бр▓╣р▓┐р▓╕р▓┐' : 
             selectedLanguage === 'te' ? 'р░кр░Вр░кр░Вр░бр░┐' :
             selectedLanguage === 'ta' ? 'роЕройрпБрокрпНрокрпБ' : 'Send'}
          </Button>
        </div>
        
        {/* Enhanced Smart Quick Actions */}
        <div className="grid grid-cols-2 md:grid-cols-4 gap-2 mb-3">
          {Object.entries(quickPrompts).map(([type, translations]) => (
            <Button
              key={type}
              variant="outline"
              size="sm"
              onClick={() => setCurrentMessage(translations[selectedLanguage as keyof typeof translations])}
              className="text-xs hover:bg-accent transition-colors p-2 h-auto text-left justify-start"
              disabled={isLoading}
              title={`Click to ask about ${type}`}
            >
              <div className="truncate w-full">
                {translations[selectedLanguage as keyof typeof translations]}
              </div>
            </Button>
          ))}
        </div>

        {/* Quick Action Examples */}
        <div className="mb-3">
          <details className="group">
            <summary className="cursor-pointer text-xs text-muted-foreground hover:text-foreground flex items-center gap-1">
              <span>
                {selectedLanguage === 'hi' ? 'ЁЯТб рдЙрджрд╛рд╣рд░рдг рдкреНрд░рд╢реНрди рджреЗрдЦреЗрдВ' : 
                 selectedLanguage === 'kn' ? 'ЁЯТб р▓Йр▓жр▓╛р▓╣р▓░р▓гр│Ж р▓кр│Нр▓░р▓╢р│Нр▓ир│Жр▓Чр▓│р▓ир│Нр▓ир│Б р▓ир│Лр▓бр▓┐' : 
                 selectedLanguage === 'te' ? 'ЁЯТб р░Йр░жр░╛р░╣р░░р░г р░кр▒Нр░░р░╢р▒Нр░ир░▓р░ир▒Б р░Ър▒Вр░бр░Вр░бр░┐' :
                 selectedLanguage === 'ta' ? 'ЁЯТб роЙродро╛ро░рог роХрпЗро│рпНро╡ро┐роХро│рпИрокрпН рокро╛ро░рпНроХрпНроХро╡рпБроорпН' :
                 'ЁЯТб View example questions'}
              </span>
              <span className="transform transition-transform group-open:rotate-90">тЦ╢</span>
            </summary>
            <div className="mt-2 space-y-1">
              {[
                selectedLanguage === 'hi' ? "рдореЗрд░реЗ рдЯрдорд╛рдЯрд░ рдХреЗ рдкрддреНрддреЗ рдкреАрд▓реЗ рд╣реЛ рд░рд╣реЗ рд╣реИрдВ, рдХреНрдпрд╛ рдХрд░реВрдВ?" : 
                selectedLanguage === 'kn' ? "р▓ир▓ир│Нр▓и р▓Яр│Кр▓ор│Зр▓Яр│К р▓Ор▓▓р│Жр▓Чр▓│р│Б р▓╣р▓│р▓жр▓┐р▓пр▓╛р▓Чр│Бр▓др│Нр▓др▓┐р▓╡р│Ж, р▓Пр▓ир│Б р▓ор▓╛р▓бр▓мр│Зр▓Хр│Б?" :
                selectedLanguage === 'te' ? "р░ир░╛ р░Яр▒Кр░ор░╛р░Яр▒Л р░Жр░Хр▒Бр░▓р▒Б р░кр░╕р▒Бр░кр▒Б р░Ер░╡р▒Бр░др▒Бр░ир▒Нр░ир░╛р░пр░┐, р░Пр░ор░┐ р░Ър▒Зр░пр░╛р░▓р░┐?" :
                selectedLanguage === 'ta' ? "роОройродрпБ родроХрпНроХро╛ро│ро┐ роЗро▓рпИроХро│рпН роороЮрпНроЪро│ро╛роХро┐ ро╡ро░рпБроХро┐ройрпНро▒рой, роОройрпНрой роЪрпЖропрпНро╡родрпБ?" :
                "My tomato leaves are turning yellow, what to do?",
                
                selectedLanguage === 'hi' ? "рджрд┐рд▓реНрд▓реА рдореЗрдВ рдкреНрдпрд╛рдЬ рдХрд╛ рднрд╛рд╡ рдХреНрдпрд╛ рдЪрд▓ рд░рд╣рд╛ рд╣реИ?" : 
                selectedLanguage === 'kn' ? "р▓жр│Жр▓╣р▓▓р▓┐р▓пр▓▓р│Нр▓▓р▓┐ р▓Ир▓░р│Бр▓│р│Нр▓│р▓┐ р▓мр│Жр▓▓р│Ж р▓Пр▓ир│Б?" :
                selectedLanguage === 'te' ? "р░вр░┐р░▓р▒Нр░▓р▒Ар░▓р▒Л р░Йр░▓р▒Нр░▓р░┐р░кр░╛р░п р░зр░░ р░Ор░Вр░д?" :
                selectedLanguage === 'ta' ? "роЯрпЖро▓рпНро▓ро┐ропро┐ро▓рпН ро╡рпЖроЩрпНроХро╛роп ро╡ро┐ро▓рпИ роОройрпНрой?" :
                "What is the onion price in Delhi?",
                
                selectedLanguage === 'hi' ? "рдорд╛рдирд╕реВрди рд╕реЗ рдкрд╣рд▓реЗ рдХреМрди рд╕реА рд╕рдмреНрдЬреА рд▓рдЧрд╛рдКрдВ?" : 
                selectedLanguage === 'kn' ? "р▓ор▓╛р▓ир│Нр▓╕р│Вр▓ир│Н р▓ор│Кр▓жр▓▓р│Б р▓пр▓╛р▓╡ р▓др▓░р▓Хр▓╛р▓░р▓┐ р▓ир▓╛р▓Яр▓мр│Зр▓Хр│Б?" :
                selectedLanguage === 'te' ? "р░╡р░░р▒Нр░╖р░╛р░Хр░╛р░▓р░В р░ор▒Бр░Вр░жр▒Б р░П р░Хр▒Вр░░р░Чр░╛р░пр░▓р▒Б р░ир░╛р░Яр░╛р░▓р░┐?" :
                selectedLanguage === 'ta' ? "рокро░рпБро╡рооро┤рпИроХрпНроХрпБ роорпБройрпН роОроирпНрод роХро╛ропрпНроХро▒ро┐ роироЯро╡рпЗрогрпНроЯрпБроорпН?" :
                "Which vegetables to plant before monsoon?"
              ].map((example, index) => (
                <button
                  key={index}
                  onClick={() => setCurrentMessage(example)}
                  className="block w-full text-left text-xs text-muted-foreground hover:text-foreground hover:bg-accent px-2 py-1 rounded transition-colors"
                  disabled={isLoading}
                >
                  тАв {example}
                </button>
              ))}
            </div>
          </details>
        </div>

        {/* Enhanced Open-Source Attribution */}
        <div className="flex items-center justify-between pt-3 border-t border-border/30">
          <div className="flex items-center gap-2 text-xs text-muted-foreground">
            <Zap className="h-3 w-3" />
            <span>Powered by</span>
            <Badge variant="outline" className="text-xs">HuggingFace</Badge>
            <span>тАв</span>
            <Badge variant="outline" className="text-xs">Open Models</Badge>
            <span>тАв</span>
            <Badge variant="outline" className="text-xs">No Vendor Lock-in</Badge>
          </div>
          
          {/* Connection Status Indicator */}
          <div className="flex items-center gap-1 text-xs">
            {getStatusIcon()}
            <span className={`capitalize ${
              connectionStatus === 'online' ? 'text-farm-green' :
              connectionStatus === 'connecting' ? 'text-farm-gold' :
              'text-muted-foreground'
            }`}>
              {connectionStatus}
            </span>
          </div>
        </div>
      </div>
    </div>
  );
};